variables:
  imagetag: '$(Build.BuildId)'

trigger:
- main

pool:
  name: 'privateAksAgentPool'
stages:
- stage: Build
  displayName: "Build and Scan"
  jobs:
  - job: BuildAndScan
    displayName: "Build and Scan Docker Image"
    steps:
    - script: |
        echo "Temporary: Purge Docker"
        docker system prune -a --volumes -f
      displayName: Clear Docker
    - script: |
        echo "Building Docker Image..."
        docker build -t $(DOCKER_IMAGE) '$(Build.SourcesDirectory)/nextjsbasicapp'
      displayName: "Build Docker Image"
    - script: |
        docker images
      displayName: 'Debug Listing Images'
    - script: |
        echo "Tagging Docker Image..."
        docker tag $(DOCKER_IMAGE) '$(PRIVATE_ACR)/$(DOCKER_IMAGE):latest'
      displayName: "Tag Docker Image"
    - script: |
        docker images
      displayName: 'Debug Listing Images'
    - task: DownloadSecureFile@1
      name: 'id_rsa'
      inputs:
        secureFile: 'id_rsa'
        retryCount: '3'
      displayName: Download Key from Pipeline to Agent
    - script: |
        chmod 600 $(id_rsa.secureFilePath)
      displayName: Chmod to the key file

    - script: |
        echo "Saving file on agent..."
        echo "Image name: $(DOCKER_IMAGE)"
        docker save '$(PRIVATE_ACR)/$(DOCKER_IMAGE):latest' | gzip > 'webapp-$(IMAGETAG).tar.gz'
      displayName: "Saving the file on the agent machine"
      
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'Jumpbox'
        contents: 'webapp-$(IMAGETAG).tar.gz'
        readyTimeout: '20000'
      displayName: 'Copy image file'
    - task: SSH@0
      inputs:
        sshEndpoint: 'Jumpbox'
        runOptions: 'inline'
        inline: 'docker load < webapp-$(IMAGETAG).tar.gz'
        readyTimeout: '20000'
      displayName: 'Docker load image to Jumpbox'
    - script: |
        echo "Tagging Docker Image at the Jumpbox VM..."
        docker tag $(DOCKER_IMAGE) '$(PRIVATE_ACR)/$(DOCKER_IMAGE):latest'
      displayName: "Tag Docker Image"
    - task: SSH@0
      inputs:
        sshEndpoint: 'Jumpbox'
        runOptions: 'inline'
        inline: |
          az login --identity
          pass init $(GPG_KEY)
          echo "Images on the Jumpbox server:"
          docker images
          echo $(ADMINPASSWORDACR) | docker login $(PRIVATE_ACR) -u $(ADMINUSERACR) --password-stdin 2> /dev/null
          docker push '$(PRIVATE_ACR)/$(DOCKER_IMAGE):latest'
        readyTimeout: '20000'
      displayName: 'Push the image to docker'
      continueOnError: true
    - task: SSH@0
      
      displayName: Deploy Application to AKS
      inputs:
        sshEndpoint: 'Jumpbox'
        runOptions: 'inline'
        inline: |
          echo "Authenticating to AKS..."
          az aks get-credentials --resource-group $(RESOURCE_GROUP_NAME) --name $(AKS_NAME) --overwrite-existing 2> /dev/null
          
          echo "Creating app Namespace..."
          kubectl create namespace $(AKS_NAMESPACE) --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Deploying Application to AKS..."
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nextjs-app
            namespace: $(AKS_NAMESPACE)
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: nextjs-app
            template:
              metadata:
                labels:
                  app: nextjs-app
              spec:
                containers:
                - name: nextjs-app
                  image: $(PRIVATE_ACR)/$(DOCKER_IMAGE):latest
                  ports:
                  - containerPort: 3000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nextjs-service
            namespace: $(AKS_NAMESPACE)
          spec:
            selector:
              app: nextjs-app
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
            type: LoadBalancer
          ---
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: nextjs-app-ingress
            namespace: app
            annotations:
              kubernetes.io/ingress.class: "nginx"
              
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: nextjs-service
                      port:
                        number: 80
          EOF
        readyTimeout: '20000'
      continueOnError: true